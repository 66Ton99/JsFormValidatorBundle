{% extends 'DefaultTestBundle::layout.html.twig' %}

{% block jquery %}{% endblock %}

{% block body %}
    {{ form_start(form, { 'attr': {'novalidate': 'novalidate' }}) }}
    {{ form_errors(form) }}
    {{ form_rest(form) }}
    {{ form_end(form) }}

    <script type="text/javascript">
        var field = document.getElementById('form_disabled');
        FpJsFormValidator.customize(field, {
            disabled: true
        });

        field = document.getElementById('form_showErrors');
        FpJsFormValidator.customize(field, {
            showErrors: function(errors, type) {
                if (!(this instanceof HTMLElement)) {
                    return;
                }
                //noinspection JSValidateTypes
                /**
                 * @type {HTMLElement}
                 */
                var domNode = this;
                var ul = FpJsFormValidator.getDefaultErrorContainerNode(domNode);
                if (ul) {
                    var len = ul.childNodes.length;
                    while (len--) {
                        if (type == ul.childNodes[len].className) {
                            ul.removeChild(ul.childNodes[len]);
                        }
                    }
                }

                if (!errors.length) {
                    if (ul && !ul.childNodes) {
                        ul.parentNode.removeChild(ul);
                    }
                    return;
                }

                if (!ul) {
                    ul = document.createElement('ul');
                    ul.className = FpJsFormValidator.errorClass;
                    domNode.parentNode.insertBefore(ul, domNode);
                }

                var li;
                for (var i in errors) {
                    li = document.createElement('li');
                    li.className = type;
                    li.innerHTML = 'custom_' + errors[i];
                    ul.appendChild(li);
                }
            }
        });

        field = document.getElementsByName('form')[0];
        FpJsFormValidator.customize(field, {
            groups: function () {
                return ['groups_callback'];
            },
            callbacks: {
                'isPasswordLegal': function() {
                    return false;
                },
                'validateCallback': function() {
                    var email = document.getElementById('form_email');
                    FpJsFormValidator.customize(email, 'showErrors', {
                        errors: ['validate_callback_email_custom'],
                        sourceId: 'validate-callback'
                    });
                },
                'ownCallback': function() {
                    var email = document.getElementById('form_email');
                    FpJsFormValidator.customize(email, 'showErrors', {
                        errors: ['own_callback_email_custom'],
                        sourceId: 'validate-callback-own'
                    });
                },
                'Fp\\JsFormValidatorBundle\\Tests\\TestBundles\\DefaultTestBundle\\Validator\\ExternalValidator': {
                    validateStaticCallback: function () {
                        var email = document.getElementById('form_email');
                        FpJsFormValidator.customize(email, 'showErrors', {
                            errors: ['static_callback_email_custom'],
                            sourceId: 'static-validate-callback'
                        });
                    }
                },
                'validateDirectStaticCallback': function() {
                    var email = document.getElementById('form_email');
                    FpJsFormValidator.customize(email, 'showErrors', {
                        errors: ['direct_static_callback_email_custom'],
                        sourceId: 'direct-static-validate-callback'
                    });
                },
                'isValidChoicesList': function () {
                    return 'September';
                },
                'getChoicesList': function () {
                    return ['June', 'July', 'August'];
                }
            }
        });
    </script>
{% endblock %}