{% javascripts '@DefaultTestBundle/Resources/public/js/jquery-1.9.1.js' %}
<script src="{{ asset_url }}"></script>
{% endjavascripts %}
{{ include('FpJsFormValidatorBundle::javascripts.html.twig') }}

<script type="text/javascript">
    $(function(){
        var _t = {
            isValid: '{{ isValid|default(1) }}',

            get: function(trueVal, falseVal) {
                return this.isValid === '1' ? trueVal : falseVal;
            }
        };

        $('#form_name').jsFormValidator({
            customEvents: function() {
                $(this).change(function(){
                    if (!$(this).jsFormValidator('validate')) {
                        console.log('custom_event');
                    }
                });
            },
            showErrors: function(errors) {
                console.log('custom_show_errors', errors);
            }
        });

        $('form').jsFormValidator({
            callbacks: {
                isNameValid: function() { return false; },

                isTrue:                 function() { return _t.get(true, false); },
                isFalse:                function() { return _t.get(false, true) },
                isNull:                 function() { return _t.get(null, 1); },
                isNotNull:              function() { return _t.get(1, null); },
                isEqualTo:              function() { return _t.get("1", "0"); },
                isNotEqualTo:           function() { return _t.get("0", "1"); },
                isIdenticalTo:          function() { return _t.get(1, "1"); },
                isNotIdenticalTo:       function() { return _t.get("1", 1); },
                isLessThan:             function() { return _t.get(0, 1); },
                isLessThanOrEqual:      function() { return _t.get(1, 2); },
                isGreaterThan:          function() { return _t.get(2, 1); },
                isGreaterThanOrEqual:   function() { return _t.get(1, 0); },
                isLengthMin:            function() { return _t.get('a', ''); },
                isLengthMax:            function() { return _t.get('a', 'aa'); },
                isLengthExact:          function() { return _t.get('a', 'aa'); },
                isCountMin:             function() { return _t.get(['a'], []); },
                isCountMax:             function() { return _t.get(['a'], ['a', 'b']); },
                isCountExact:           function() { return _t.get(['a'], ['a', 'a']); },
                isRangeMin:             function() { return _t.get(2, 0); },
                isRangeMax:             function() { return _t.get(1, 2); },
                isRangeValueValid:      function() { return _t.get(1, 'a'); },
                isTypeArray:            function() { return _t.get(['a'], 'a'); },
                isTypeBool:             function() { return _t.get(true, 'a'); },
                isTypeCallable:         function() { return _t.get(function(){}, 'a'); },
                isTypeFloat:            function() { return _t.get(1.0, 1); },
                isTypeInteger:          function() { return _t.get(1, 1.0); },
                isTypeNull:             function() { return _t.get(null, 'a'); },
                isTypeNumeric:          function() { return _t.get("1", 'a'); },
                isTypeObject:           function() { return _t.get({}, 'a'); },
                isTypeScalar:           function() { return _t.get(1, [1,2,3]); },
                isTypeString:           function() { return _t.get('1', 1); },
                isValidSingleChoice:    function() { return _t.get('male', 'wrong_choice'); },
                isValidMultipleChoice:  function() { return _t.get(['June', 'July'], ['June', 'May']); },
                isMinMultipleChoice:    function() { return _t.get(['June', 'July'], ['June']); },
                isMaxMultipleChoice:    function() { return _t.get(['June'], ['June', 'July']); },

                getChoicesList: function() { return ['June', 'July', 'August']; }
            },
            groups: function () {
                console.log('custom_groups', this);
                return [];
            }
        });
    });
</script>

<div id="transformer_result"></div>
{{ form_start(form, { 'attr': {'novalidate': 'novalidate' }}) }}
    {{ form_errors(form) }}
    <input type="submit" name="form_submit" id="form_submit"/>
    {{ form_rest(form) }}
{{ form_end(form) }}

{% if checkListeners|default(false) %}
    <div>
        <ul class="form-error" id="onvalidate_listeners_list"></ul>
        <div id="onvalidate_listeners_element"></div>
    </div>
    <script type="text/javascript">
        function addOnValidateListenerResult(name) {
            var li = document.createElement('li');
            li.innerHTML = name;
            document.getElementById('onvalidate_listeners_list').appendChild(li);
        }

        {% if  checkListenersMode == 'onvalidate' %}
            FpJsFormValidatorFactory.onvalidate = function(){
                addOnValidateListenerResult('global_listener')
            };
            document.getElementsByTagName('form')[0].onvalidate = function(){
                addOnValidateListenerResult('local_listener')
            };
        {% elseif checkListenersMode == 'global_errors' %}
            FpJsFormValidatorFactory.showErrors = function(){
                addOnValidateListenerResult('errors_global_listener')
            };
        {% elseif checkListenersMode == 'local_errors' %}
            document.getElementsByTagName('form')[0].showErrors = function(){
                addOnValidateListenerResult('errors_local_listener')
            };
        {% endif %}
    </script>
{% endif %}